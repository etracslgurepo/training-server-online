import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.common.*
import treasury.utils.*;

class EORService {

    @Env 
    def env 

    @Service( dynamic=true )
    def dynaSvc; 

    @Service("DateService")
    def dateService
        
    @Service("NumberService")
    def numSvc  

    @Service("EORNumberService")
    def eorNumSvc;

    @Service(value="RevenueSharingService", connection="treasury")
    def sharingSvc;

    @DataContext( dynamic=true )
    def dynaEm;

    @DataContext('eor')
    def eorEm;

    @DataContext('paymentpartner')
    def partnerEm;

    @DataContext("eor_paymentorder")
    def poEm; 

    @DataContext("eor_paymentorder_paid")
    def po_paid_db; 

    @ProxyMethod
    public def post( def po ) {
        if(!po.items)
            throw new Exception("Please provide items in EORService.post");      

        def svrDate = dateService.serverDate;
        def entity = [:];
        entity.partnerid = po.partnerid;
        entity.receiptno = eorNumSvc.getNextEORNumber( po.partnerid );
        entity.receiptdate = po.tracedate;
        entity.txndate = svrDate;
        entity.state = 'PENDING';
        entity.txntype = po.txntype;
        entity.txntypename = po.txntypename;

        entity.tracedate = po.tracedate;
        entity.traceid = po.traceid;

        entity.paidby = po.paidby; 
        entity.paidbyaddress = po.paidbyaddress;
        entity.payer = po.payer;
        entity.remarks = po.particulars; 
        entity.refid = po.refid;
        entity.paymentrefid = po.objid;
        entity.amount = po.amount;
        entity.remarks = po.particulars;

        entity.paymethod = po.origin; 

        if(!entity.paymentrefid)
            throw new Exception("entity.paymentrefid is null");

        entity.items = po.items; 
        entity.items.each{
            if ( it.item && !it.item.code ) {
                it.item.code = '-'; 
            }
        }

        //calculate sharing first
        entity.sharing = sharingSvc.execute( entity );

        //transfer first the payment order to paid. we need to do this first because it has foreign key constraints by eor.
        po_paid_db.create( po ); 

        //delete the payment order that was already transferred after eor was created.
        poEm.find([ objid: po.objid ]).delete(); 

        //save the entity
        entity = eorEm.create( entity ); 

        return eorEm.find( [objid: entity.objid] ).first(1);
    }  



    @ProxyMethod
    public def sendEmail( param ) {
        if ( !param.receiptno && !param.receiptid ) 
            throw new Exception('receiptno parameter is required in sendEmail'); 

        def eor = null; 
        if ( param.receiptno ) {
            eor = eorEm.find([ receiptno : param.receiptno ]).first(); 
        } 
        else if ( param.receiptid ) {
            eor = eorEm.find([ objid : param.receiptid ]).first(); 
        }

        if ( !eor ) throw new Exception("EOR record not found ");

        def po = po_paid_db.find([ objid: eor.paymentrefid ]).first(); 
        def mail_to = ( param.email ? param.email : po?.email ); 
        if ( !mail_to ) throw new Exception("Please provide an email first");

        def mm = [:]; 
        mm.info = eor; 
        mm.to = mail_to;
        mm.connection = 'primary-email-server'; 
        mm.reportid = 'eor';
        mm.refid = eor.objid; 

        def template = dynaEm.lookup('sys_email_template').find([ objid: mm.reportid ]).first();
        if ( template ) { 
            def templateEngine = new groovy.text.SimpleTemplateEngine(); 
            if ( template.subject ) { 
                mm.subject = templateEngine.createTemplate( template.subject ).make( mm.info )?.toString(); 
            } 
            if ( template.message ) { 
                mm.message = templateEngine.createTemplate( template.message ).make( mm.info )?.toString(); 
            } 
        }

        if ( !mm.subject ) throw new Exception("Please provide the email subject"); 
        if ( !mm.message ) throw new Exception("Please provide the email message"); 

        return dynaSvc.lookup('JasperReportEmailService').send( mm );
    }
}
