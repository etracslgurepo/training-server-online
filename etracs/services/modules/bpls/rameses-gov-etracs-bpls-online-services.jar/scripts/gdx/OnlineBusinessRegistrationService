import com.rameses.annotations.*;
import com.rameses.server.BootLoader;
import com.rameses.util.KeyGen; 
import org.apache.commons.codec.binary.Base64;
import java.rmi.server.UID;

class OnlineBusinessRegistrationService {

	@ActiveDB('online_bpls')
	def online_bpls;

	@XConnection( dynamic=true )
	def dynaConn;

	@DataContext( dynamic=true )
	def dynaEm;

	@Service( dynamic=true )
	def dynaSvc; 


	@ProxyMethod
	public def getLobs( param ) { 
		def res = online_bpls.getLobsWithPSIC(); 

		def resolveStr = { str-> 
			if ( !str ) return str; 
			return str.toString().replaceAll("\\n"," ").trim();
		}

		def list = [];
		res.groupBy{ it.objid }.each{ k,v-> 
			def mm = [:]; 
			def fo = v.first(); 
			mm.putAll( fo ); 
			mm.remove('lob'); 
			mm.lobs = v.collect{ it.lob } 
			mm.lobnames = mm.lobs.collect{ it.name }.findAll{( it )}.sort{ it }.unique().join(', '); 

			mm.name = resolveStr( mm.name ); 
			mm.details = resolveStr( mm.details ); 
			mm.classification.name = resolveStr( mm.classification.name ); 
			mm.classification.details = resolveStr( mm.classification.details ); 
			list << mm; 
		}
		res.clear(); 
		list.sort{ it.name } 

		if ( param?.gzip.toString() == '1' ) {
			def jsonUtil = new com.rameses.osiris3.server.JSON();
			def jsonBytes = jsonUtil.encode( list ).getBytes("UTF-8"); 
			def baos = new java.io.ByteArrayOutputStream(); 
			def gzip = new java.util.zip.GZIPOutputStream(baos);
			try { 
			    gzip.write( jsonBytes ); 
			} finally {
			    gzip.close();
			}

			def compressedBytes = baos.toByteArray(); 
			return [new Base64().encodeAsString( compressedBytes )];
		}
		return list; 
	} 

	@ProxyMethod 
	public def getBarangays( param ) {
		
		def qmap = [node: [:]]; 
		qmap._schemaname = 'barangay'; 
		qmap.select = 'objid,indexno,pin,name,parentid';
		qmap.where = '1=1';
		qmap.orderBy = 'name';

		def svc = dynaSvc.lookup('QueryService');
		return svc.getList( qmap ); 
	}

	@ProxyMethod
	public def buildUAF( param ) {
		// param: app, partner
		if ( !param?.partner?.id ) throw new Exception('partner.id  parameter is required in buildUAF');
		if ( !param?.partner?.name ) throw new Exception('partner.name  parameter is required in buildUAF');
		if ( !param?.partner?.group ) throw new Exception('partner.group  parameter is required in buildUAF');
		if ( !(param?.app instanceof Map)) throw new Exception('partner.app  parameter is required in buildUAF');

		def app = param.app;
		validate( app, 'buildUAF' ); 
		resolveAddress( app.address ); 
		resolveApplicant( app.applicant ); 
		resolveContact( app.contact, app.applicant, app.orgtype ); 

		def ruleSvc = dynaSvc.lookup('gdx/OnlineBusinessRuleService'); 
		def docList = ruleSvc.getRequirements( app ); 
		app.requirements = docList; 

		def xconn = dynaConn.lookup('s3'); 
		def viewerScheme = xconn.conf.get('viewer.scheme'); 
		if ( !viewerScheme ) viewerScheme = 'http';

		def viewerHost = xconn.conf.get('viewer.host'); 
		if ( !viewerHost ) 
			throw new Exception("'viewer.host' must be set in the 's3' connection file"); 

		def viewerContext = xconn.conf.get('viewer.context'); 
		if ( viewerContext == null ) 
			throw new Exception("'viewer.context' must be set in the 's3' connection file"); 

		def uafSvc = dynaSvc.lookup('gdx/OnlineBplsUAFService');
		def result = uafSvc.generateNew( app ); 
		def filename = result.tokenid +'.pdf'; 

		def paths = [ param.partner.id, 'bpls', app.trackingno, ('uaf-'+ filename)]; 
		def key = paths.join('/').toLowerCase(); 

		def outdir = BootLoader.getOutputDir();
		def file = new java.io.File( outdir, filename ); 
		xconn.send([ source: file, key: key ]); 

		paths = [ viewerHost, viewerContext, key ]; 
		result = [ path: viewerScheme +"://"+ paths.findAll{( it )}.join('/') ]; 
		return result; 
	}

	@ProxyMethod
	public def submit( param ) { 
		validate( param, 'submit' ); 
		resolveAddress( param.address ); 
		resolveApplicant( param.applicant ); 
		resolveContact( param.contact, param.applicant, param.orgtype ); 

		def rundate = dynaSvc.lookup('DateService').getServerDate();
		def appid = 'ONBPAPP-'+ new java.rmi.server.UID().toString(); 

		def newapp = [:]; 
		newapp.objid = appid;
		newapp.state = 'OPEN';
		newapp.dtcreated = rundate;
  		newapp.createdby = (newapp.createdby ? newapp.createdby : [:]); 
  		if ( !newapp.createdby?.objid ) newapp.createdby.objid = 'filipizen'; 
  		if ( !newapp.createdby?.name ) newapp.createdby.name = 'filipizen'; 

		param.apptype = 'NEW'; 
  		newapp.apptype = param.remove('apptype'); 
  		newapp.appyear = param.remove('appyear');
  		newapp.appdate = resolveDate( param.remove('appdate')); 
  		newapp.step = param.remove('step');
  		newapp.contact = param.remove('contact');
  		newapp.tradename = param.remove('tradename');
  		newapp.businessname = param.remove('businessname');
  		newapp.address = param.remove('address');
  		newapp.owner = param.remove('applicant');
  		
  		def p_lobs = param.remove('lobs');
  		def lob_ids = p_lobs.collect{ it.lob?.objid }.findAll{( it )} 

  		def queryMap = [_schemaname: 'lob'];
  		queryMap.where = "objid IN ('"+ lob_ids.join("','") +"')";
  		queryMap.select = 'objid,name'; 

  		def querySvc = dynaSvc.lookup('QueryService');
  		def lobs = querySvc.getList( queryMap );  
  		
  		newapp.lobs = [];

  		p_lobs.each{ o-> 
  			def mm = [
				objid: 'BUSLOB-'+ new java.rmi.server.UID().toString(), 
				appyear: newapp.appyear, txndate: rundate, 
				assessmenttype: newapp.apptype 
  			]; 
  			mm.lob = lobs.find{( it.objid == o.lob.objid )} 
  			newapp.lobs << mm;
  		}

  		newapp.infos = param.remove('infos');
  		newapp.requirements = param.remove('requirements');

  		newapp.requirements.eachWithIndex{ o, idx-> 
  			def path = o.attachment?.location; 
  			if ( !path ) path = o.attachment?.path;
  			if ( !path ) return;

			o.docid = newapp.objid +'-doc'+ idx; 

  			if ( path.indexOf("://") > 0 ) {
				def sb = new StringBuilder(); 
				sb.append("/s3/"); 

				def ii = path.indexOf("://"); 
				sb.append( path.substring( ii+3 ));

				path = o.path = sb.toString(); 
			}

			if ( !o.attachment.filename ) {
				o.attachment.filename = path.substring( path.lastIndexOf('/')+ 1 ); 
			}
			if ( !o.attachment.filetype ) {
				def filename = o.attachment.filename; 
				o.attachment.filetype = filename.substring( filename.lastIndexOf('.')+ 1 ); 
			}
			if ( !o.attachment.name ) {
				o.attachment.name = o.attachment.filename; 
			} 
  		}

  		def appdocs = [];
  		newapp.requirements.findAll{( it.docid )}.each{
  			def mm = [objid: it.docid, parentid: newapp.objid];
  			mm.doc = [type: it.ref?.reftype, title: it.ref?.title];
  			mm.attachment = [objid: mm.doc.type, path: it.path]; 
  			mm.attachment.name = it.attachment?.name; 
			if ( !mm.attachment.name ) {
				mm.attachment.name =  it.attachment?.filename;
			}
			mm.fs = [ filetype: it.attachment.filetype, state: 'PENDING' ]; 
			mm.scheduledate = rundate;
			mm.filesize = mm.bytesprocessed = 0; 

			appdocs << mm; 
  		} 

  		newapp.dtsubmitted = rundate; 
  		newapp.controlno = param.trackingno;
  		newapp.partnername = System.getenv().get('filipizen_group'); 
  		newapp.datainfo = param;

		def online_app = dynaEm.lookup('online_business_application'); 
		def online_appdoc = dynaEm.lookup('online_business_application_doc'); 
		def online_download = dynaEm.lookup('online_business_application_doc_fordownload'); 

		newapp = online_app.create( newapp ); 

		appdocs.each{ 
			online_appdoc.create( it ); 
			online_download.create( it ); 
		}

		return [
			objid: newapp.objid, 
			mesage: 'Application submitted for review', 
			status: 'success'
		];
	}



	// 
	// helper methods
	// 
	void validate( Map param, String callingMethodName ) {
		if ( !param ) throw new Exception('please provide the parameters for '+ callingMethodName);
		if ( !param.appyear ) throw new Exception("'appyear'  parameter is required in "+ callingMethodName);
		if ( !param.appdate ) throw new Exception("'appdate'  parameter is required in "+ callingMethodName);
		if ( !param.tradename ) throw new Exception("'tradename'  parameter is required in "+ callingMethodName);
		if ( !param.businessname ) throw new Exception("'businessname'  parameter is required in "+ callingMethodName);
		if ( !param.address ) throw new Exception("'address'  parameter is required in "+ callingMethodName);
		if ( !param.orgtype?.id ) throw new Exception("'orgtype.id'  parameter is required in "+ callingMethodName);
		if ( !param.primarylob ) throw new Exception("'primarylob'  parameter is required in "+ callingMethodName);
		if ( !param.infos ) throw new Exception("'infos'  parameter is required in "+ callingMethodName);
		if ( !param.requirements ) throw new Exception("'requirements'  parameter is required in "+ callingMethodName);
		if ( !param.applicant ) throw new Exception("'applicant'  parameter is required in "+ callingMethodName);
		if ( !param.applicant?.lastname ) throw new Exception("'applicant.lastname'  parameter is required in "+ callingMethodName);
		if ( !param.applicant?.firstname ) throw new Exception("'applicant.firstname'  parameter is required in "+ callingMethodName);

		def lobs = [ param.primarylob ];
		if ( param.lobs instanceof List ) {
			lobs.addAll( param.lobs ); 
		}
		
		lobs.eachWithIndex{ o,idx-> 
			if ( !(o.lob instanceof Map ))
				throw new Exception("'lobs["+ idx +"].lob.objid'  parameter is required in "+ callingMethodName);
			if ( !o.lob?.objid )
				throw new Exception("'lobs["+ idx +"].objid'  parameter is required in "+ callingMethodName);
			if ( !o.lob?.name )
				throw new Exception("'lobs["+ idx +"].name'  parameter is required in "+ callingMethodName);
			if ( !(o.lob?.classification instanceof Map ))
				throw new Exception("'lobs["+ idx +"].classification.objid'  parameter is required in "+ callingMethodName);
			if ( !o.lob?.classification?.objid )
				throw new Exception("'lobs["+ idx +"].classification.objid'  parameter is required in "+ callingMethodName);
		}
	}

	void resolveAddress( Map addr ) {
		if ( addr.rented.toString().matches('true|1')) {
			addr.type = 'rented'; 
		}
		else if ( addr.inlgumarketrental.toString().matches('true|1')) { 
			addr.type = 'government'; 
		}

		if ( !addr.type ) { 
			addr.type = 'local'; 
		}

		if ( !(addr.barangay instanceof Map)) {
			def brgyname = addr.barangay; 
			addr.barangay = [name: brgyname]; 
		}

		def s1 = [addr.bldgno, addr.bldgname, addr.unitno].findAll{( it )}.join(' '); 
		def s2 = [addr.street, addr.subdivision, addr.barangay.name].findAll{( it )}.join(' '); 
		addr.text = [s1, s2].findAll{( it )}.join(' '); 
	}

	void resolveApplicant( Map param ) {		
		def sname = [param.lastname, param.firstname].findAll{( it )}.join(', '); 
		param.name = [sname, param.middlename].findAll{( it )}.join(' '); 
		if ( param.address instanceof Map ) {
			resolveAddress( param.address ); 
		} 
		else { 
			param.address = [text: param.address];
		}
	}

	void resolveContact( Map contact, Map applicant, Map orgtype ) {
		def orgtypeid = orgtype.id; 
		if ( !contact.name ) {
			if ( orgtypeid == 'SING' ) { 
				contact.name = applicant.name; 
			}
		}
		if ( !contact.address ) {
			if ( orgtypeid == 'SING' ) { 
				contact.address = applicant.address.text; 
			} 
		}
	}

	def resolveDate( value ) {
		if ( value == null ) return value; 
		else if ( value instanceof Date ) return value; 

		def arr = value.toString().split('T'); 
		if ( arr.length == 1 ) return value; 

		if (arr[1].endsWith('Z')) { 
			arr[1] = arr[1].substring(0, arr[1].length()-1); 
		}
		return (arr[0] +' '+ arr[1]); 
	}

	Map buildApp( Map app ) {
		def map = [business: [:]]; 
		map.business.address = app.address;
		map.business.permittype = 'BUSINESS'; 
		map.business.officetype = 'MAIN'; 
		map.business.orgtype = app.orgtype.id; 
		map.apptype = 'NEW';
		map.appyear = app.appyear; 
		map.appdate = app.appdate; 
		map.orgtype = app.orgtype.id; 
		map.yearstarted = app.yearstarted; 

		map.dtfiled = app.appdate;
		map.txnmode = 'ONLINE'; 
		map.lobs = [];

		app.lobs.each{  
			map.lobs << [
				objid: 'BUSLOB-'+ new java.rmi.server.UID().toString(), 
				lobid: it.lob.objid, name: it.lob.name, 
				classification: it.lob.classification, 
				assessmenttype: 'NEW' 
			]; 
		} 

		if ( !map.yearstarted ) { 
			map.yearstarted = app.appyear; 
		}

		return map;
	}	
} 
