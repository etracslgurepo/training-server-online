import com.rameses.annotations.*;
import com.rameses.util.KeyGen; 
import java.rmi.server.UID;

class OnlineBusinessApplicationService {

	@DataContext( dynamic=true )
	def dynaEm; 

	@Service( dynamic=true ) 
	def dynaSvc;


	@ProxyMethod 
	public def approve( param ) {
		def app = findApp( param.objid, null );		
		if ( !app.state.toString().matches('OPEN')) 
			throw new Exception('Application record must be in OPEN status'); 

		
		def svc = null; 

		if ( app.apptype == 'NEW' ) {
			svc = dynaSvc.lookup('bpls/OnlineAppNewService'); 
		} 
		else {
			svc = dynaSvc.lookup('bpls/OnlineAppRenewalService'); 
		}

		return svc.approve( app );
	}

	@ProxyMethod 
	public void mapTaxpayer( param ) { 
		def app = findApp( param.objid, 'objid,state,apptype,datainfo' );	
		if ( !app.state.toString().matches('OPEN')) 
			throw new Exception('Application record must be in OPEN status'); 

		if ( app.apptype != 'NEW' )
			throw new Exception('This feature is applicable only for NEW application'); 

		if ( !param.taxpayerid )
			throw new Exception("'taxpayerid'  parameter is required in mapTaxpayer method"); 

		app.datainfo.taxpayerid = param.taxpayerid; 

		def em = dynaEm.lookup('online_business_application'); 
		em.find([ objid: app.objid ]).update([ datainfo: app.datainfo ]); 
	} 

	@ProxyMethod 
	public void unmapTaxpayer( param ) { 
		def app = findApp( param.objid, 'objid,state,apptype,datainfo' );	
		if ( !app.state.toString().matches('OPEN')) 
			throw new Exception('Application record must be in OPEN status'); 

		if ( app.apptype != 'NEW' )
			throw new Exception('This feature is applicable only for NEW application'); 

		app.datainfo.remove('taxpayerid'); 

		def em = dynaEm.lookup('online_business_application'); 
		em.find([ objid: app.objid ]).update([ datainfo: app.datainfo ]); 
	} 

	def findApp( objid, selectFields ) {
		if ( !objid ) throw new Exception('objid parameter is required');  

		def em = dynaEm.lookup('online_business_application'); 

		def findby = [ objid: objid ];
		em = em.find( findby ); 
		if ( selectFields ) { 
			em.select( selectFields );
		} 

		def app = em.first(); 
		if ( app ) return app; 

		throw new Exception('Online application record not found'); 
	}
} 
